[[[[[[[[[[작업순서(프로젝트관리자 - 최초작업)]]]]]]]]]]]
main -> 전체 프로젝트가 저장되는 브랜치(모든 브랜치의 작업 내용을 병합해 놓은 브랜치)
master -> 프로젝트 관리자가 개발하는 내용을 저장하는 브랜치
1. github사이트에 repository생성
2. STS에 프로젝트 만들기
3. 로컬저장소를 생성
4. github와 연결
5. 원격지의 소스를 fetch(로컬로 다운로드)
6. 원격지의 소스와 내소스를 merge
7. push하기


용어
 - commit : 현재 작업폴더에서 작업한 내용을 로컬저장소에 저장
 - push : 로컬에서 작업하는 것을 원격저장소에 올리기
 - pull : 원격저장소의 파일을 로컬로 내려받고 merge까지 자동으로 처리
 - fetch : 원격지의 내용을 로컬로 다운로드
 - merge : 원격지에서 내려받은 각 브랜치의 내용을 합치기
 
주의사항
  - 협업을 하다 보면 팀원이 작업한 내용을 github에 업로드하고 원격저장소에 변경된 내용이 발생
  - 변경된 원격지의 소스코드를 내 로컬저장소에 다운로드해서 동기화해놓은 후에 작업한 코드를 올려야 한다.
  
  https://blog.naver.com/heaves1/221622325119
  
  


[[[[[[변경된 내용을 반영하기]]]]]]]


[[[[[[팀원이 프로젝트 사용하는 방법]]]]]]
1. 팀장님한테 콜라보신청을 받고
2. 수락
3. 프로젝트 관리자가 올려놓은 git의 저장소를 로컬저장소로 다운로드 
4. 내용변경한 후에 브랜치 push
5. 프로젝트 관리자에게 pull request
    ====> pull request를 받은 프로젝트 관리자는 pull request를 승인(merge처리)
    
6. 나머지 팀원에게 공지
   변경된 내용이 있으므로 fetch-merge    



[미션1]
   1. github에 exam1 repostitory만들기
   2. STS에 exam1프로젝트만들기
   3. 1에서 만든 repostitory와 STS exam1프로젝트와 연결
   4. exam1의 내용을 push
   5. github의 repository의 main브랜치에 exam1의 내용이 모두 push되도록 작업하기
   
   => git과 git Repostitory캡쳐해서 슬랙이나 메일로 전송하기

[미션2]
   조별로 springproject프로젝트를 github에 만들고 팀원을 콜라보로 추가해서 작업
   
[미션3]
   조별로 접속할 수 있는 서브계정 6개 
    1조서브계정 - 팀원1,팀원2.... 
    
    각 팀원이 사용할 계정이 있으면 메일로 혹은 슬랙으로 내일 1시까지
    user조_1,user조_2....
















